// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  GenesisState defines the liquidity module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.GenesisState)
pub struct GenesisState {
    // message fields
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::liquidity::Params>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.last_pair_id)
    pub last_pair_id: u64,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.last_pool_id)
    pub last_pool_id: u64,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.pairs)
    pub pairs: ::std::vec::Vec<super::liquidity::Pair>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.pools)
    pub pools: ::std::vec::Vec<super::liquidity::Pool>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.deposit_requests)
    pub deposit_requests: ::std::vec::Vec<super::liquidity::DepositRequest>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.withdraw_requests)
    pub withdraw_requests: ::std::vec::Vec<super::liquidity::WithdrawRequest>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.orders)
    pub orders: ::std::vec::Vec<super::liquidity::Order>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.GenesisState.market_making_order_indexes)
    pub market_making_order_indexes: ::std::vec::Vec<super::liquidity::MMOrderIndex>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::liquidity::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_pair_id",
            |m: &GenesisState| { &m.last_pair_id },
            |m: &mut GenesisState| { &mut m.last_pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_pool_id",
            |m: &GenesisState| { &m.last_pool_id },
            |m: &mut GenesisState| { &mut m.last_pool_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pairs",
            |m: &GenesisState| { &m.pairs },
            |m: &mut GenesisState| { &mut m.pairs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pools",
            |m: &GenesisState| { &m.pools },
            |m: &mut GenesisState| { &mut m.pools },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deposit_requests",
            |m: &GenesisState| { &m.deposit_requests },
            |m: &mut GenesisState| { &mut m.deposit_requests },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "withdraw_requests",
            |m: &GenesisState| { &m.withdraw_requests },
            |m: &mut GenesisState| { &mut m.withdraw_requests },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "orders",
            |m: &GenesisState| { &m.orders },
            |m: &mut GenesisState| { &mut m.orders },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "market_making_order_indexes",
            |m: &GenesisState| { &m.market_making_order_indexes },
            |m: &mut GenesisState| { &mut m.market_making_order_indexes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                16 => {
                    self.last_pair_id = is.read_uint64()?;
                },
                24 => {
                    self.last_pool_id = is.read_uint64()?;
                },
                34 => {
                    self.pairs.push(is.read_message()?);
                },
                42 => {
                    self.pools.push(is.read_message()?);
                },
                50 => {
                    self.deposit_requests.push(is.read_message()?);
                },
                58 => {
                    self.withdraw_requests.push(is.read_message()?);
                },
                66 => {
                    self.orders.push(is.read_message()?);
                },
                74 => {
                    self.market_making_order_indexes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.last_pair_id);
        }
        if self.last_pool_id != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.last_pool_id);
        }
        for value in &self.pairs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.pools {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.deposit_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.withdraw_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.market_making_order_indexes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.last_pair_id != 0 {
            os.write_uint64(2, self.last_pair_id)?;
        }
        if self.last_pool_id != 0 {
            os.write_uint64(3, self.last_pool_id)?;
        }
        for v in &self.pairs {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.pools {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.deposit_requests {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.withdraw_requests {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.orders {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.market_making_order_indexes {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.last_pair_id = 0;
        self.last_pool_id = 0;
        self.pairs.clear();
        self.pools.clear();
        self.deposit_requests.clear();
        self.withdraw_requests.clear();
        self.orders.clear();
        self.market_making_order_indexes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            params: ::protobuf::MessageField::none(),
            last_pair_id: 0,
            last_pool_id: 0,
            pairs: ::std::vec::Vec::new(),
            pools: ::std::vec::Vec::new(),
            deposit_requests: ::std::vec::Vec::new(),
            withdraw_requests: ::std::vec::Vec::new(),
            orders: ::std::vec::Vec::new(),
            market_making_order_indexes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rgenesis.proto\x12\x13shogun.liquidity.v1\x1a\x0fliquidity.proto\"\
    \xa2\x04\n\x0cGenesisState\x123\n\x06params\x18\x01\x20\x01(\x0b2\x1b.sh\
    ogun.liquidity.v1.ParamsR\x06params\x12\x20\n\x0clast_pair_id\x18\x02\
    \x20\x01(\x04R\nlastPairId\x12\x20\n\x0clast_pool_id\x18\x03\x20\x01(\
    \x04R\nlastPoolId\x12/\n\x05pairs\x18\x04\x20\x03(\x0b2\x19.shogun.liqui\
    dity.v1.PairR\x05pairs\x12/\n\x05pools\x18\x05\x20\x03(\x0b2\x19.shogun.\
    liquidity.v1.PoolR\x05pools\x12N\n\x10deposit_requests\x18\x06\x20\x03(\
    \x0b2#.shogun.liquidity.v1.DepositRequestR\x0fdepositRequests\x12Q\n\x11\
    withdraw_requests\x18\x07\x20\x03(\x0b2$.shogun.liquidity.v1.WithdrawReq\
    uestR\x10withdrawRequests\x122\n\x06orders\x18\x08\x20\x03(\x0b2\x1a.sho\
    gun.liquidity.v1.OrderR\x06orders\x12`\n\x1bmarket_making_order_indexes\
    \x18\t\x20\x03(\x0b2!.shogun.liquidity.v1.MMOrderIndexR\x18marketMakingO\
    rderIndexesJ\xc0\x05\n\x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\0\
    \x19\nH\n\x02\x04\0\x12\x04\x06\0\x18\x01\x1a<\x20GenesisState\x20define\
    s\x20the\x20liquidity\x20module's\x20genesis\x20state.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x06\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x15\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x07\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x12\x13\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\t\x15\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\t\x18\x19\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x0b\x02\x1a\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03\x0b\t\x15\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x0b\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x02\x1b\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03\r\x0b\x0f\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r\x10\x15\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\r\x18\x19\n\x0b\n\x04\x04\0\x02\x04\x12\
    \x03\x0f\x02\x1b\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0f\x02\n\n\x0c\n\
    \x05\x04\0\x02\x04\x06\x12\x03\x0f\x0b\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x0f\x10\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0f\x18\x19\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x11\x020\n\x0c\n\x05\x04\0\x02\x05\x04\
    \x12\x03\x11\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x11\x0b\x19\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x11\x1a*\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03\x11-.\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x13\x022\n\x0c\n\
    \x05\x04\0\x02\x06\x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\
    \x12\x03\x13\x0b\x1a\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x13\x1b,\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x13/0\n\x0b\n\x04\x04\0\x02\x07\x12\
    \x03\x15\x02\x1d\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03\x15\x02\n\n\x0c\n\
    \x05\x04\0\x02\x07\x06\x12\x03\x15\x0b\x10\n\x0c\n\x05\x04\0\x02\x07\x01\
    \x12\x03\x15\x11\x17\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x15\x1a\x1b\n\
    \x0b\n\x04\x04\0\x02\x08\x12\x03\x17\x029\n\x0c\n\x05\x04\0\x02\x08\x04\
    \x12\x03\x17\x02\n\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03\x17\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x17\x183\n\x0c\n\x05\x04\0\x02\x08\
    \x03\x12\x03\x1767b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::liquidity::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GenesisState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

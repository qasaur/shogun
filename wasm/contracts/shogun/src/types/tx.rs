// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  MsgCreatePair defines an SDK message for creating a pair.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCreatePair)
pub struct MsgCreatePair {
    // message fields
    ///  creator specifies the bech32-encoded address that is the pair creator.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreatePair.creator)
    pub creator: ::std::string::String,
    ///  base_coin_denom specifies the base coin denom of the pair.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreatePair.base_coin_denom)
    pub base_coin_denom: ::std::string::String,
    ///  quote_coin_denom specifies the quote coin denom of the pair.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreatePair.quote_coin_denom)
    pub quote_coin_denom: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCreatePair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreatePair {
    fn default() -> &'a MsgCreatePair {
        <MsgCreatePair as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreatePair {
    pub fn new() -> MsgCreatePair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &MsgCreatePair| { &m.creator },
            |m: &mut MsgCreatePair| { &mut m.creator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_coin_denom",
            |m: &MsgCreatePair| { &m.base_coin_denom },
            |m: &mut MsgCreatePair| { &mut m.base_coin_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quote_coin_denom",
            |m: &MsgCreatePair| { &m.quote_coin_denom },
            |m: &mut MsgCreatePair| { &mut m.quote_coin_denom },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreatePair>(
            "MsgCreatePair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreatePair {
    const NAME: &'static str = "MsgCreatePair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.creator = is.read_string()?;
                },
                18 => {
                    self.base_coin_denom = is.read_string()?;
                },
                26 => {
                    self.quote_coin_denom = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if !self.base_coin_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_coin_denom);
        }
        if !self.quote_coin_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.quote_coin_denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if !self.base_coin_denom.is_empty() {
            os.write_string(2, &self.base_coin_denom)?;
        }
        if !self.quote_coin_denom.is_empty() {
            os.write_string(3, &self.quote_coin_denom)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreatePair {
        MsgCreatePair::new()
    }

    fn clear(&mut self) {
        self.creator.clear();
        self.base_coin_denom.clear();
        self.quote_coin_denom.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreatePair {
        static instance: MsgCreatePair = MsgCreatePair {
            creator: ::std::string::String::new(),
            base_coin_denom: ::std::string::String::new(),
            quote_coin_denom: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreatePair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreatePair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreatePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreatePair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCreatePairResponse)
pub struct MsgCreatePairResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCreatePairResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreatePairResponse {
    fn default() -> &'a MsgCreatePairResponse {
        <MsgCreatePairResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreatePairResponse {
    pub fn new() -> MsgCreatePairResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreatePairResponse>(
            "MsgCreatePairResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreatePairResponse {
    const NAME: &'static str = "MsgCreatePairResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreatePairResponse {
        MsgCreatePairResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreatePairResponse {
        static instance: MsgCreatePairResponse = MsgCreatePairResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreatePairResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreatePairResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreatePairResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreatePairResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreatePool defines an SDK message for creating a pool.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCreatePool)
pub struct MsgCreatePool {
    // message fields
    ///  creator specifies the bech32-encoded address that is the pool creator
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreatePool.creator)
    pub creator: ::std::string::String,
    ///  pair_id specifies the pair id.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreatePool.pair_id)
    pub pair_id: u64,
    ///  deposit_coins specifies the amount of coins to deposit.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreatePool.deposit_coins)
    pub deposit_coins: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCreatePool.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreatePool {
    fn default() -> &'a MsgCreatePool {
        <MsgCreatePool as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreatePool {
    pub fn new() -> MsgCreatePool {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &MsgCreatePool| { &m.creator },
            |m: &mut MsgCreatePool| { &mut m.creator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgCreatePool| { &m.pair_id },
            |m: &mut MsgCreatePool| { &mut m.pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deposit_coins",
            |m: &MsgCreatePool| { &m.deposit_coins },
            |m: &mut MsgCreatePool| { &mut m.deposit_coins },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreatePool>(
            "MsgCreatePool",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreatePool {
    const NAME: &'static str = "MsgCreatePool";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.creator = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                26 => {
                    self.deposit_coins.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        for value in &self.deposit_coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        for v in &self.deposit_coins {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreatePool {
        MsgCreatePool::new()
    }

    fn clear(&mut self) {
        self.creator.clear();
        self.pair_id = 0;
        self.deposit_coins.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreatePool {
        static instance: MsgCreatePool = MsgCreatePool {
            creator: ::std::string::String::new(),
            pair_id: 0,
            deposit_coins: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreatePool {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreatePool").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreatePool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreatePool {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreatePoolResponse defines the Msg/CreatePool response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCreatePoolResponse)
pub struct MsgCreatePoolResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCreatePoolResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreatePoolResponse {
    fn default() -> &'a MsgCreatePoolResponse {
        <MsgCreatePoolResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreatePoolResponse {
    pub fn new() -> MsgCreatePoolResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreatePoolResponse>(
            "MsgCreatePoolResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreatePoolResponse {
    const NAME: &'static str = "MsgCreatePoolResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreatePoolResponse {
        MsgCreatePoolResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreatePoolResponse {
        static instance: MsgCreatePoolResponse = MsgCreatePoolResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreatePoolResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreatePoolResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreatePoolResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreatePoolResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreateRangedPool defines an SDK message for creating a ranged pool.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCreateRangedPool)
pub struct MsgCreateRangedPool {
    // message fields
    ///  creator specifies the bech32-encoded address that is the pool creator
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreateRangedPool.creator)
    pub creator: ::std::string::String,
    ///  pair_id specifies the pair id.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreateRangedPool.pair_id)
    pub pair_id: u64,
    ///  deposit_coins specifies the amount of coins to deposit.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreateRangedPool.deposit_coins)
    pub deposit_coins: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreateRangedPool.min_price)
    pub min_price: ::std::string::String,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreateRangedPool.max_price)
    pub max_price: ::std::string::String,
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCreateRangedPool.initial_price)
    pub initial_price: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCreateRangedPool.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateRangedPool {
    fn default() -> &'a MsgCreateRangedPool {
        <MsgCreateRangedPool as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateRangedPool {
    pub fn new() -> MsgCreateRangedPool {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &MsgCreateRangedPool| { &m.creator },
            |m: &mut MsgCreateRangedPool| { &mut m.creator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgCreateRangedPool| { &m.pair_id },
            |m: &mut MsgCreateRangedPool| { &mut m.pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deposit_coins",
            |m: &MsgCreateRangedPool| { &m.deposit_coins },
            |m: &mut MsgCreateRangedPool| { &mut m.deposit_coins },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_price",
            |m: &MsgCreateRangedPool| { &m.min_price },
            |m: &mut MsgCreateRangedPool| { &mut m.min_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_price",
            |m: &MsgCreateRangedPool| { &m.max_price },
            |m: &mut MsgCreateRangedPool| { &mut m.max_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "initial_price",
            |m: &MsgCreateRangedPool| { &m.initial_price },
            |m: &mut MsgCreateRangedPool| { &mut m.initial_price },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateRangedPool>(
            "MsgCreateRangedPool",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateRangedPool {
    const NAME: &'static str = "MsgCreateRangedPool";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.creator = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                26 => {
                    self.deposit_coins.push(is.read_message()?);
                },
                34 => {
                    self.min_price = is.read_string()?;
                },
                42 => {
                    self.max_price = is.read_string()?;
                },
                50 => {
                    self.initial_price = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        for value in &self.deposit_coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.min_price.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.min_price);
        }
        if !self.max_price.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.max_price);
        }
        if !self.initial_price.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.initial_price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        for v in &self.deposit_coins {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.min_price.is_empty() {
            os.write_string(4, &self.min_price)?;
        }
        if !self.max_price.is_empty() {
            os.write_string(5, &self.max_price)?;
        }
        if !self.initial_price.is_empty() {
            os.write_string(6, &self.initial_price)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateRangedPool {
        MsgCreateRangedPool::new()
    }

    fn clear(&mut self) {
        self.creator.clear();
        self.pair_id = 0;
        self.deposit_coins.clear();
        self.min_price.clear();
        self.max_price.clear();
        self.initial_price.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateRangedPool {
        static instance: MsgCreateRangedPool = MsgCreateRangedPool {
            creator: ::std::string::String::new(),
            pair_id: 0,
            deposit_coins: ::std::vec::Vec::new(),
            min_price: ::std::string::String::new(),
            max_price: ::std::string::String::new(),
            initial_price: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateRangedPool {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateRangedPool").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateRangedPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateRangedPool {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreateRangedPoolResponse defines the Msg/CreateRangedPool response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCreateRangedPoolResponse)
pub struct MsgCreateRangedPoolResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCreateRangedPoolResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateRangedPoolResponse {
    fn default() -> &'a MsgCreateRangedPoolResponse {
        <MsgCreateRangedPoolResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateRangedPoolResponse {
    pub fn new() -> MsgCreateRangedPoolResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateRangedPoolResponse>(
            "MsgCreateRangedPoolResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateRangedPoolResponse {
    const NAME: &'static str = "MsgCreateRangedPoolResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateRangedPoolResponse {
        MsgCreateRangedPoolResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateRangedPoolResponse {
        static instance: MsgCreateRangedPoolResponse = MsgCreateRangedPoolResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateRangedPoolResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateRangedPoolResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateRangedPoolResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateRangedPoolResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDeposit defines an SDK message for depositing coins to the pool
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgDeposit)
pub struct MsgDeposit {
    // message fields
    ///  depositor specifies the bech32-encoded address that makes a deposit to the pool
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgDeposit.depositor)
    pub depositor: ::std::string::String,
    ///  pool_id specifies the pool id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgDeposit.pool_id)
    pub pool_id: u64,
    ///  deposit_coins specifies the amount of coins to deposit.
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgDeposit.deposit_coins)
    pub deposit_coins: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgDeposit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDeposit {
    fn default() -> &'a MsgDeposit {
        <MsgDeposit as ::protobuf::Message>::default_instance()
    }
}

impl MsgDeposit {
    pub fn new() -> MsgDeposit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depositor",
            |m: &MsgDeposit| { &m.depositor },
            |m: &mut MsgDeposit| { &mut m.depositor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_id",
            |m: &MsgDeposit| { &m.pool_id },
            |m: &mut MsgDeposit| { &mut m.pool_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deposit_coins",
            |m: &MsgDeposit| { &m.deposit_coins },
            |m: &mut MsgDeposit| { &mut m.deposit_coins },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDeposit>(
            "MsgDeposit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDeposit {
    const NAME: &'static str = "MsgDeposit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.depositor = is.read_string()?;
                },
                16 => {
                    self.pool_id = is.read_uint64()?;
                },
                26 => {
                    self.deposit_coins.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.depositor);
        }
        if self.pool_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pool_id);
        }
        for value in &self.deposit_coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.depositor.is_empty() {
            os.write_string(1, &self.depositor)?;
        }
        if self.pool_id != 0 {
            os.write_uint64(2, self.pool_id)?;
        }
        for v in &self.deposit_coins {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDeposit {
        MsgDeposit::new()
    }

    fn clear(&mut self) {
        self.depositor.clear();
        self.pool_id = 0;
        self.deposit_coins.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDeposit {
        static instance: MsgDeposit = MsgDeposit {
            depositor: ::std::string::String::new(),
            pool_id: 0,
            deposit_coins: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDeposit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDeposit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDeposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDeposit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDepositResponse defines the Msg/Deposit response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgDepositResponse)
pub struct MsgDepositResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgDepositResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDepositResponse {
    fn default() -> &'a MsgDepositResponse {
        <MsgDepositResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDepositResponse {
    pub fn new() -> MsgDepositResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDepositResponse>(
            "MsgDepositResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDepositResponse {
    const NAME: &'static str = "MsgDepositResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDepositResponse {
        MsgDepositResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDepositResponse {
        static instance: MsgDepositResponse = MsgDepositResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDepositResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDepositResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDepositResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDepositResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgWithdraw defines an SDK message for withdrawing pool coin from the pool
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgWithdraw)
pub struct MsgWithdraw {
    // message fields
    ///  withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgWithdraw.withdrawer)
    pub withdrawer: ::std::string::String,
    ///  pool_id specifies the pool id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgWithdraw.pool_id)
    pub pool_id: u64,
    ///  pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgWithdraw.pool_coin)
    pub pool_coin: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgWithdraw.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgWithdraw {
    fn default() -> &'a MsgWithdraw {
        <MsgWithdraw as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdraw {
    pub fn new() -> MsgWithdraw {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "withdrawer",
            |m: &MsgWithdraw| { &m.withdrawer },
            |m: &mut MsgWithdraw| { &mut m.withdrawer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_id",
            |m: &MsgWithdraw| { &m.pool_id },
            |m: &mut MsgWithdraw| { &mut m.pool_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "pool_coin",
            |m: &MsgWithdraw| { &m.pool_coin },
            |m: &mut MsgWithdraw| { &mut m.pool_coin },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgWithdraw>(
            "MsgWithdraw",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgWithdraw {
    const NAME: &'static str = "MsgWithdraw";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.withdrawer = is.read_string()?;
                },
                16 => {
                    self.pool_id = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pool_coin)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.withdrawer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.withdrawer);
        }
        if self.pool_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pool_id);
        }
        if let Some(v) = self.pool_coin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.withdrawer.is_empty() {
            os.write_string(1, &self.withdrawer)?;
        }
        if self.pool_id != 0 {
            os.write_uint64(2, self.pool_id)?;
        }
        if let Some(v) = self.pool_coin.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgWithdraw {
        MsgWithdraw::new()
    }

    fn clear(&mut self) {
        self.withdrawer.clear();
        self.pool_id = 0;
        self.pool_coin.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgWithdraw {
        static instance: MsgWithdraw = MsgWithdraw {
            withdrawer: ::std::string::String::new(),
            pool_id: 0,
            pool_coin: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgWithdraw {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgWithdraw").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgWithdraw {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdraw {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgWithdrawResponse defines the Msg/Withdraw response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgWithdrawResponse)
pub struct MsgWithdrawResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgWithdrawResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawResponse {
    fn default() -> &'a MsgWithdrawResponse {
        <MsgWithdrawResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawResponse {
    pub fn new() -> MsgWithdrawResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgWithdrawResponse>(
            "MsgWithdrawResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgWithdrawResponse {
    const NAME: &'static str = "MsgWithdrawResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgWithdrawResponse {
        MsgWithdrawResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgWithdrawResponse {
        static instance: MsgWithdrawResponse = MsgWithdrawResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgWithdrawResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgWithdrawResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgWithdrawResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgLimitOrder defines an SDK message for making a limit order
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgLimitOrder)
pub struct MsgLimitOrder {
    // message fields
    ///  orderer specifies the bech32-encoded address that makes an order
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.orderer)
    pub orderer: ::std::string::String,
    ///  pair_id specifies the pair id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.pair_id)
    pub pair_id: u64,
    ///  direction specifies the order direction(buy or sell)
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.direction)
    pub direction: ::protobuf::EnumOrUnknown<super::liquidity::OrderDirection>,
    ///  offer_coin specifies the amount of coin the orderer offers
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.offer_coin)
    pub offer_coin: ::protobuf::MessageField<super::coin::Coin>,
    ///  demand_coin_denom specifies the demand coin denom
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.demand_coin_denom)
    pub demand_coin_denom: ::std::string::String,
    ///  price specifies the order price
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.price)
    pub price: ::std::string::String,
    ///  amount specifies the amount of base coin the orderer wants to buy or sell
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.amount)
    pub amount: ::std::string::String,
    ///  order_lifespan specifies the order lifespan
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgLimitOrder.order_lifespan)
    pub order_lifespan: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgLimitOrder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgLimitOrder {
    fn default() -> &'a MsgLimitOrder {
        <MsgLimitOrder as ::protobuf::Message>::default_instance()
    }
}

impl MsgLimitOrder {
    pub fn new() -> MsgLimitOrder {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderer",
            |m: &MsgLimitOrder| { &m.orderer },
            |m: &mut MsgLimitOrder| { &mut m.orderer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgLimitOrder| { &m.pair_id },
            |m: &mut MsgLimitOrder| { &mut m.pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &MsgLimitOrder| { &m.direction },
            |m: &mut MsgLimitOrder| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "offer_coin",
            |m: &MsgLimitOrder| { &m.offer_coin },
            |m: &mut MsgLimitOrder| { &mut m.offer_coin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "demand_coin_denom",
            |m: &MsgLimitOrder| { &m.demand_coin_denom },
            |m: &mut MsgLimitOrder| { &mut m.demand_coin_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &MsgLimitOrder| { &m.price },
            |m: &mut MsgLimitOrder| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &MsgLimitOrder| { &m.amount },
            |m: &mut MsgLimitOrder| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "order_lifespan",
            |m: &MsgLimitOrder| { &m.order_lifespan },
            |m: &mut MsgLimitOrder| { &mut m.order_lifespan },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgLimitOrder>(
            "MsgLimitOrder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgLimitOrder {
    const NAME: &'static str = "MsgLimitOrder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderer = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                24 => {
                    self.direction = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.offer_coin)?;
                },
                42 => {
                    self.demand_coin_denom = is.read_string()?;
                },
                50 => {
                    self.price = is.read_string()?;
                },
                58 => {
                    self.amount = is.read_string()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.order_lifespan)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderer);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(super::liquidity::OrderDirection::ORDER_DIRECTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.direction.value());
        }
        if let Some(v) = self.offer_coin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.demand_coin_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.demand_coin_denom);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.price);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.amount);
        }
        if let Some(v) = self.order_lifespan.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderer.is_empty() {
            os.write_string(1, &self.orderer)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(super::liquidity::OrderDirection::ORDER_DIRECTION_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.direction))?;
        }
        if let Some(v) = self.offer_coin.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.demand_coin_denom.is_empty() {
            os.write_string(5, &self.demand_coin_denom)?;
        }
        if !self.price.is_empty() {
            os.write_string(6, &self.price)?;
        }
        if !self.amount.is_empty() {
            os.write_string(7, &self.amount)?;
        }
        if let Some(v) = self.order_lifespan.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgLimitOrder {
        MsgLimitOrder::new()
    }

    fn clear(&mut self) {
        self.orderer.clear();
        self.pair_id = 0;
        self.direction = ::protobuf::EnumOrUnknown::new(super::liquidity::OrderDirection::ORDER_DIRECTION_UNSPECIFIED);
        self.offer_coin.clear();
        self.demand_coin_denom.clear();
        self.price.clear();
        self.amount.clear();
        self.order_lifespan.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgLimitOrder {
        static instance: MsgLimitOrder = MsgLimitOrder {
            orderer: ::std::string::String::new(),
            pair_id: 0,
            direction: ::protobuf::EnumOrUnknown::from_i32(0),
            offer_coin: ::protobuf::MessageField::none(),
            demand_coin_denom: ::std::string::String::new(),
            price: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            order_lifespan: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgLimitOrder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgLimitOrder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgLimitOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgLimitOrder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgLimitOrderResponse defines the Msg/LimitOrder response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgLimitOrderResponse)
pub struct MsgLimitOrderResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgLimitOrderResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgLimitOrderResponse {
    fn default() -> &'a MsgLimitOrderResponse {
        <MsgLimitOrderResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgLimitOrderResponse {
    pub fn new() -> MsgLimitOrderResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgLimitOrderResponse>(
            "MsgLimitOrderResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgLimitOrderResponse {
    const NAME: &'static str = "MsgLimitOrderResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgLimitOrderResponse {
        MsgLimitOrderResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgLimitOrderResponse {
        static instance: MsgLimitOrderResponse = MsgLimitOrderResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgLimitOrderResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgLimitOrderResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgLimitOrderResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgLimitOrderResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgMarketOrder defines an SDK message for making a market order
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgMarketOrder)
pub struct MsgMarketOrder {
    // message fields
    ///  orderer specifies the bech32-encoded address that makes an order
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.orderer)
    pub orderer: ::std::string::String,
    ///  pair_id specifies the pair id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.pair_id)
    pub pair_id: u64,
    ///  direction specifies the order direction(buy or sell)
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.direction)
    pub direction: ::protobuf::EnumOrUnknown<super::liquidity::OrderDirection>,
    ///  offer_coin specifies the amount of coin the orderer offers
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.offer_coin)
    pub offer_coin: ::protobuf::MessageField<super::coin::Coin>,
    ///  demand_coin_denom specifies the demand coin denom
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.demand_coin_denom)
    pub demand_coin_denom: ::std::string::String,
    ///  amount specifies the amount of base coin the orderer wants to buy or sell
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.amount)
    pub amount: ::std::string::String,
    ///  order_lifespan specifies the order lifespan
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMarketOrder.order_lifespan)
    pub order_lifespan: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgMarketOrder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgMarketOrder {
    fn default() -> &'a MsgMarketOrder {
        <MsgMarketOrder as ::protobuf::Message>::default_instance()
    }
}

impl MsgMarketOrder {
    pub fn new() -> MsgMarketOrder {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderer",
            |m: &MsgMarketOrder| { &m.orderer },
            |m: &mut MsgMarketOrder| { &mut m.orderer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgMarketOrder| { &m.pair_id },
            |m: &mut MsgMarketOrder| { &mut m.pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &MsgMarketOrder| { &m.direction },
            |m: &mut MsgMarketOrder| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "offer_coin",
            |m: &MsgMarketOrder| { &m.offer_coin },
            |m: &mut MsgMarketOrder| { &mut m.offer_coin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "demand_coin_denom",
            |m: &MsgMarketOrder| { &m.demand_coin_denom },
            |m: &mut MsgMarketOrder| { &mut m.demand_coin_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &MsgMarketOrder| { &m.amount },
            |m: &mut MsgMarketOrder| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "order_lifespan",
            |m: &MsgMarketOrder| { &m.order_lifespan },
            |m: &mut MsgMarketOrder| { &mut m.order_lifespan },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgMarketOrder>(
            "MsgMarketOrder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgMarketOrder {
    const NAME: &'static str = "MsgMarketOrder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderer = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                24 => {
                    self.direction = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.offer_coin)?;
                },
                42 => {
                    self.demand_coin_denom = is.read_string()?;
                },
                50 => {
                    self.amount = is.read_string()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.order_lifespan)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderer);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(super::liquidity::OrderDirection::ORDER_DIRECTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.direction.value());
        }
        if let Some(v) = self.offer_coin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.demand_coin_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.demand_coin_denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.amount);
        }
        if let Some(v) = self.order_lifespan.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderer.is_empty() {
            os.write_string(1, &self.orderer)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(super::liquidity::OrderDirection::ORDER_DIRECTION_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.direction))?;
        }
        if let Some(v) = self.offer_coin.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.demand_coin_denom.is_empty() {
            os.write_string(5, &self.demand_coin_denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(6, &self.amount)?;
        }
        if let Some(v) = self.order_lifespan.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgMarketOrder {
        MsgMarketOrder::new()
    }

    fn clear(&mut self) {
        self.orderer.clear();
        self.pair_id = 0;
        self.direction = ::protobuf::EnumOrUnknown::new(super::liquidity::OrderDirection::ORDER_DIRECTION_UNSPECIFIED);
        self.offer_coin.clear();
        self.demand_coin_denom.clear();
        self.amount.clear();
        self.order_lifespan.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgMarketOrder {
        static instance: MsgMarketOrder = MsgMarketOrder {
            orderer: ::std::string::String::new(),
            pair_id: 0,
            direction: ::protobuf::EnumOrUnknown::from_i32(0),
            offer_coin: ::protobuf::MessageField::none(),
            demand_coin_denom: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            order_lifespan: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgMarketOrder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgMarketOrder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgMarketOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMarketOrder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgMarketOrderResponse defines the Msg/MarketOrder response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgMarketOrderResponse)
pub struct MsgMarketOrderResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgMarketOrderResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgMarketOrderResponse {
    fn default() -> &'a MsgMarketOrderResponse {
        <MsgMarketOrderResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgMarketOrderResponse {
    pub fn new() -> MsgMarketOrderResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgMarketOrderResponse>(
            "MsgMarketOrderResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgMarketOrderResponse {
    const NAME: &'static str = "MsgMarketOrderResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgMarketOrderResponse {
        MsgMarketOrderResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgMarketOrderResponse {
        static instance: MsgMarketOrderResponse = MsgMarketOrderResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgMarketOrderResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgMarketOrderResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgMarketOrderResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMarketOrderResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgMMOrder defines an SDK message for making a MM(market making) order.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgMMOrder)
pub struct MsgMMOrder {
    // message fields
    ///  orderer specifies the bech32-encoded address that makes an order
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.orderer)
    pub orderer: ::std::string::String,
    ///  pair_id specifies the pair id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.pair_id)
    pub pair_id: u64,
    ///  max_sell_price specifies the maximum sell price
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.max_sell_price)
    pub max_sell_price: ::std::string::String,
    ///  min_sell_price specifies the minimum sell price
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.min_sell_price)
    pub min_sell_price: ::std::string::String,
    ///  sell_amount specifies the total amount of base coin of sell orders
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.sell_amount)
    pub sell_amount: ::std::string::String,
    ///  max_buy_price specifies the maximum buy price
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.max_buy_price)
    pub max_buy_price: ::std::string::String,
    ///  min_buy_price specifies the minimum buy price
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.min_buy_price)
    pub min_buy_price: ::std::string::String,
    ///  buy_amount specifies the total amount of base coin of buy orders
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.buy_amount)
    pub buy_amount: ::std::string::String,
    ///  order_lifespan specifies the order lifespan
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgMMOrder.order_lifespan)
    pub order_lifespan: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgMMOrder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgMMOrder {
    fn default() -> &'a MsgMMOrder {
        <MsgMMOrder as ::protobuf::Message>::default_instance()
    }
}

impl MsgMMOrder {
    pub fn new() -> MsgMMOrder {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderer",
            |m: &MsgMMOrder| { &m.orderer },
            |m: &mut MsgMMOrder| { &mut m.orderer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgMMOrder| { &m.pair_id },
            |m: &mut MsgMMOrder| { &mut m.pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_sell_price",
            |m: &MsgMMOrder| { &m.max_sell_price },
            |m: &mut MsgMMOrder| { &mut m.max_sell_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_sell_price",
            |m: &MsgMMOrder| { &m.min_sell_price },
            |m: &mut MsgMMOrder| { &mut m.min_sell_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sell_amount",
            |m: &MsgMMOrder| { &m.sell_amount },
            |m: &mut MsgMMOrder| { &mut m.sell_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_buy_price",
            |m: &MsgMMOrder| { &m.max_buy_price },
            |m: &mut MsgMMOrder| { &mut m.max_buy_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_buy_price",
            |m: &MsgMMOrder| { &m.min_buy_price },
            |m: &mut MsgMMOrder| { &mut m.min_buy_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buy_amount",
            |m: &MsgMMOrder| { &m.buy_amount },
            |m: &mut MsgMMOrder| { &mut m.buy_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "order_lifespan",
            |m: &MsgMMOrder| { &m.order_lifespan },
            |m: &mut MsgMMOrder| { &mut m.order_lifespan },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgMMOrder>(
            "MsgMMOrder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgMMOrder {
    const NAME: &'static str = "MsgMMOrder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderer = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                26 => {
                    self.max_sell_price = is.read_string()?;
                },
                34 => {
                    self.min_sell_price = is.read_string()?;
                },
                42 => {
                    self.sell_amount = is.read_string()?;
                },
                50 => {
                    self.max_buy_price = is.read_string()?;
                },
                58 => {
                    self.min_buy_price = is.read_string()?;
                },
                66 => {
                    self.buy_amount = is.read_string()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.order_lifespan)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderer);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        if !self.max_sell_price.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.max_sell_price);
        }
        if !self.min_sell_price.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.min_sell_price);
        }
        if !self.sell_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.sell_amount);
        }
        if !self.max_buy_price.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.max_buy_price);
        }
        if !self.min_buy_price.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.min_buy_price);
        }
        if !self.buy_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buy_amount);
        }
        if let Some(v) = self.order_lifespan.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderer.is_empty() {
            os.write_string(1, &self.orderer)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        if !self.max_sell_price.is_empty() {
            os.write_string(3, &self.max_sell_price)?;
        }
        if !self.min_sell_price.is_empty() {
            os.write_string(4, &self.min_sell_price)?;
        }
        if !self.sell_amount.is_empty() {
            os.write_string(5, &self.sell_amount)?;
        }
        if !self.max_buy_price.is_empty() {
            os.write_string(6, &self.max_buy_price)?;
        }
        if !self.min_buy_price.is_empty() {
            os.write_string(7, &self.min_buy_price)?;
        }
        if !self.buy_amount.is_empty() {
            os.write_string(8, &self.buy_amount)?;
        }
        if let Some(v) = self.order_lifespan.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgMMOrder {
        MsgMMOrder::new()
    }

    fn clear(&mut self) {
        self.orderer.clear();
        self.pair_id = 0;
        self.max_sell_price.clear();
        self.min_sell_price.clear();
        self.sell_amount.clear();
        self.max_buy_price.clear();
        self.min_buy_price.clear();
        self.buy_amount.clear();
        self.order_lifespan.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgMMOrder {
        static instance: MsgMMOrder = MsgMMOrder {
            orderer: ::std::string::String::new(),
            pair_id: 0,
            max_sell_price: ::std::string::String::new(),
            min_sell_price: ::std::string::String::new(),
            sell_amount: ::std::string::String::new(),
            max_buy_price: ::std::string::String::new(),
            min_buy_price: ::std::string::String::new(),
            buy_amount: ::std::string::String::new(),
            order_lifespan: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgMMOrder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgMMOrder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgMMOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMMOrder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgMMOrderResponse defines the Msg/MMOrder response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgMMOrderResponse)
pub struct MsgMMOrderResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgMMOrderResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgMMOrderResponse {
    fn default() -> &'a MsgMMOrderResponse {
        <MsgMMOrderResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgMMOrderResponse {
    pub fn new() -> MsgMMOrderResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgMMOrderResponse>(
            "MsgMMOrderResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgMMOrderResponse {
    const NAME: &'static str = "MsgMMOrderResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgMMOrderResponse {
        MsgMMOrderResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgMMOrderResponse {
        static instance: MsgMMOrderResponse = MsgMMOrderResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgMMOrderResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgMMOrderResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgMMOrderResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMMOrderResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCancelOrder defines an SDK message for cancelling an order
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCancelOrder)
pub struct MsgCancelOrder {
    // message fields
    ///  orderer specifies the bech32-encoded address that makes an order
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelOrder.orderer)
    pub orderer: ::std::string::String,
    ///  pair_id specifies the pair id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelOrder.pair_id)
    pub pair_id: u64,
    ///  order_id specifies the order id
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelOrder.order_id)
    pub order_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCancelOrder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCancelOrder {
    fn default() -> &'a MsgCancelOrder {
        <MsgCancelOrder as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelOrder {
    pub fn new() -> MsgCancelOrder {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderer",
            |m: &MsgCancelOrder| { &m.orderer },
            |m: &mut MsgCancelOrder| { &mut m.orderer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgCancelOrder| { &m.pair_id },
            |m: &mut MsgCancelOrder| { &mut m.pair_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_id",
            |m: &MsgCancelOrder| { &m.order_id },
            |m: &mut MsgCancelOrder| { &mut m.order_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCancelOrder>(
            "MsgCancelOrder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCancelOrder {
    const NAME: &'static str = "MsgCancelOrder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderer = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                24 => {
                    self.order_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderer);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        if self.order_id != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.order_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderer.is_empty() {
            os.write_string(1, &self.orderer)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        if self.order_id != 0 {
            os.write_uint64(3, self.order_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCancelOrder {
        MsgCancelOrder::new()
    }

    fn clear(&mut self) {
        self.orderer.clear();
        self.pair_id = 0;
        self.order_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCancelOrder {
        static instance: MsgCancelOrder = MsgCancelOrder {
            orderer: ::std::string::String::new(),
            pair_id: 0,
            order_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCancelOrder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCancelOrder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCancelOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelOrder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCancelOrderResponse defines the Msg/CancelOrder response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCancelOrderResponse)
pub struct MsgCancelOrderResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCancelOrderResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCancelOrderResponse {
    fn default() -> &'a MsgCancelOrderResponse {
        <MsgCancelOrderResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelOrderResponse {
    pub fn new() -> MsgCancelOrderResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCancelOrderResponse>(
            "MsgCancelOrderResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCancelOrderResponse {
    const NAME: &'static str = "MsgCancelOrderResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCancelOrderResponse {
        MsgCancelOrderResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCancelOrderResponse {
        static instance: MsgCancelOrderResponse = MsgCancelOrderResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCancelOrderResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCancelOrderResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCancelOrderResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelOrderResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCancelAllOrders defines an SDK message for cancelling all orders
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCancelAllOrders)
pub struct MsgCancelAllOrders {
    // message fields
    ///  orderer specifies the bech32-encoded address that makes an order
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelAllOrders.orderer)
    pub orderer: ::std::string::String,
    ///  pair_ids specifies pair ids to cancel orders
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelAllOrders.pair_ids)
    pub pair_ids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCancelAllOrders.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCancelAllOrders {
    fn default() -> &'a MsgCancelAllOrders {
        <MsgCancelAllOrders as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelAllOrders {
    pub fn new() -> MsgCancelAllOrders {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderer",
            |m: &MsgCancelAllOrders| { &m.orderer },
            |m: &mut MsgCancelAllOrders| { &mut m.orderer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pair_ids",
            |m: &MsgCancelAllOrders| { &m.pair_ids },
            |m: &mut MsgCancelAllOrders| { &mut m.pair_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCancelAllOrders>(
            "MsgCancelAllOrders",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCancelAllOrders {
    const NAME: &'static str = "MsgCancelAllOrders";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderer = is.read_string()?;
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.pair_ids)?;
                },
                16 => {
                    self.pair_ids.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderer);
        }
        for value in &self.pair_ids {
            my_size += ::protobuf::rt::uint64_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderer.is_empty() {
            os.write_string(1, &self.orderer)?;
        }
        for v in &self.pair_ids {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCancelAllOrders {
        MsgCancelAllOrders::new()
    }

    fn clear(&mut self) {
        self.orderer.clear();
        self.pair_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCancelAllOrders {
        static instance: MsgCancelAllOrders = MsgCancelAllOrders {
            orderer: ::std::string::String::new(),
            pair_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCancelAllOrders {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCancelAllOrders").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCancelAllOrders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelAllOrders {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCancelAllOrdersResponse defines the Msg/CancelAllOrders response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCancelAllOrdersResponse)
pub struct MsgCancelAllOrdersResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCancelAllOrdersResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCancelAllOrdersResponse {
    fn default() -> &'a MsgCancelAllOrdersResponse {
        <MsgCancelAllOrdersResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelAllOrdersResponse {
    pub fn new() -> MsgCancelAllOrdersResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCancelAllOrdersResponse>(
            "MsgCancelAllOrdersResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCancelAllOrdersResponse {
    const NAME: &'static str = "MsgCancelAllOrdersResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCancelAllOrdersResponse {
        MsgCancelAllOrdersResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCancelAllOrdersResponse {
        static instance: MsgCancelAllOrdersResponse = MsgCancelAllOrdersResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCancelAllOrdersResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCancelAllOrdersResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCancelAllOrdersResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelAllOrdersResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCancelMMOrder defines an SDK message for cancelling all market making orders
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCancelMMOrder)
pub struct MsgCancelMMOrder {
    // message fields
    ///  orderer specifies the bech32-encoded address that makes an order
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelMMOrder.orderer)
    pub orderer: ::std::string::String,
    ///  pair_id specifies the pair id to cancel orders
    // @@protoc_insertion_point(field:shogun.liquidity.v1.MsgCancelMMOrder.pair_id)
    pub pair_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCancelMMOrder.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCancelMMOrder {
    fn default() -> &'a MsgCancelMMOrder {
        <MsgCancelMMOrder as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelMMOrder {
    pub fn new() -> MsgCancelMMOrder {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderer",
            |m: &MsgCancelMMOrder| { &m.orderer },
            |m: &mut MsgCancelMMOrder| { &mut m.orderer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pair_id",
            |m: &MsgCancelMMOrder| { &m.pair_id },
            |m: &mut MsgCancelMMOrder| { &mut m.pair_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCancelMMOrder>(
            "MsgCancelMMOrder",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCancelMMOrder {
    const NAME: &'static str = "MsgCancelMMOrder";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderer = is.read_string()?;
                },
                16 => {
                    self.pair_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderer);
        }
        if self.pair_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.pair_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderer.is_empty() {
            os.write_string(1, &self.orderer)?;
        }
        if self.pair_id != 0 {
            os.write_uint64(2, self.pair_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCancelMMOrder {
        MsgCancelMMOrder::new()
    }

    fn clear(&mut self) {
        self.orderer.clear();
        self.pair_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCancelMMOrder {
        static instance: MsgCancelMMOrder = MsgCancelMMOrder {
            orderer: ::std::string::String::new(),
            pair_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCancelMMOrder {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCancelMMOrder").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCancelMMOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelMMOrder {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCancelMMOrderResponse defines the Msg/CancelMMOrder response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:shogun.liquidity.v1.MsgCancelMMOrderResponse)
pub struct MsgCancelMMOrderResponse {
    // special fields
    // @@protoc_insertion_point(special_field:shogun.liquidity.v1.MsgCancelMMOrderResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCancelMMOrderResponse {
    fn default() -> &'a MsgCancelMMOrderResponse {
        <MsgCancelMMOrderResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelMMOrderResponse {
    pub fn new() -> MsgCancelMMOrderResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCancelMMOrderResponse>(
            "MsgCancelMMOrderResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCancelMMOrderResponse {
    const NAME: &'static str = "MsgCancelMMOrderResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCancelMMOrderResponse {
        MsgCancelMMOrderResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCancelMMOrderResponse {
        static instance: MsgCancelMMOrderResponse = MsgCancelMMOrderResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCancelMMOrderResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCancelMMOrderResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCancelMMOrderResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelMMOrderResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08tx.proto\x12\x13shogun.liquidity.v1\x1a\x1ecosmos/base/v1beta1/coi\
    n.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x0fliquidity.proto\"{\
    \n\rMsgCreatePair\x12\x18\n\x07creator\x18\x01\x20\x01(\tR\x07creator\
    \x12&\n\x0fbase_coin_denom\x18\x02\x20\x01(\tR\rbaseCoinDenom\x12(\n\x10\
    quote_coin_denom\x18\x03\x20\x01(\tR\x0equoteCoinDenom\"\x17\n\x15MsgCre\
    atePairResponse\"\x82\x01\n\rMsgCreatePool\x12\x18\n\x07creator\x18\x01\
    \x20\x01(\tR\x07creator\x12\x17\n\x07pair_id\x18\x02\x20\x01(\x04R\x06pa\
    irId\x12>\n\rdeposit_coins\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1\
    .CoinR\x0cdepositCoins\"\x17\n\x15MsgCreatePoolResponse\"\xe7\x01\n\x13M\
    sgCreateRangedPool\x12\x18\n\x07creator\x18\x01\x20\x01(\tR\x07creator\
    \x12\x17\n\x07pair_id\x18\x02\x20\x01(\x04R\x06pairId\x12>\n\rdeposit_co\
    ins\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0cdepositCoins\
    \x12\x1b\n\tmin_price\x18\x04\x20\x01(\tR\x08minPrice\x12\x1b\n\tmax_pri\
    ce\x18\x05\x20\x01(\tR\x08maxPrice\x12#\n\rinitial_price\x18\x06\x20\x01\
    (\tR\x0cinitialPrice\"\x1d\n\x1bMsgCreateRangedPoolResponse\"\x83\x01\n\
    \nMsgDeposit\x12\x1c\n\tdepositor\x18\x01\x20\x01(\tR\tdepositor\x12\x17\
    \n\x07pool_id\x18\x02\x20\x01(\x04R\x06poolId\x12>\n\rdeposit_coins\x18\
    \x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0cdepositCoins\"\x14\n\
    \x12MsgDepositResponse\"~\n\x0bMsgWithdraw\x12\x1e\n\nwithdrawer\x18\x01\
    \x20\x01(\tR\nwithdrawer\x12\x17\n\x07pool_id\x18\x02\x20\x01(\x04R\x06p\
    oolId\x126\n\tpool_coin\x18\x03\x20\x01(\x0b2\x19.cosmos.base.v1beta1.Co\
    inR\x08poolCoin\"\x15\n\x13MsgWithdrawResponse\"\xdb\x02\n\rMsgLimitOrde\
    r\x12\x18\n\x07orderer\x18\x01\x20\x01(\tR\x07orderer\x12\x17\n\x07pair_\
    id\x18\x02\x20\x01(\x04R\x06pairId\x12A\n\tdirection\x18\x03\x20\x01(\
    \x0e2#.shogun.liquidity.v1.OrderDirectionR\tdirection\x128\n\noffer_coin\
    \x18\x04\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\tofferCoin\x12*\n\
    \x11demand_coin_denom\x18\x05\x20\x01(\tR\x0fdemandCoinDenom\x12\x14\n\
    \x05price\x18\x06\x20\x01(\tR\x05price\x12\x16\n\x06amount\x18\x07\x20\
    \x01(\tR\x06amount\x12@\n\x0eorder_lifespan\x18\x08\x20\x01(\x0b2\x19.go\
    ogle.protobuf.DurationR\rorderLifespan\"\x17\n\x15MsgLimitOrderResponse\
    \"\xc6\x02\n\x0eMsgMarketOrder\x12\x18\n\x07orderer\x18\x01\x20\x01(\tR\
    \x07orderer\x12\x17\n\x07pair_id\x18\x02\x20\x01(\x04R\x06pairId\x12A\n\
    \tdirection\x18\x03\x20\x01(\x0e2#.shogun.liquidity.v1.OrderDirectionR\t\
    direction\x128\n\noffer_coin\x18\x04\x20\x01(\x0b2\x19.cosmos.base.v1bet\
    a1.CoinR\tofferCoin\x12*\n\x11demand_coin_denom\x18\x05\x20\x01(\tR\x0fd\
    emandCoinDenom\x12\x16\n\x06amount\x18\x06\x20\x01(\tR\x06amount\x12@\n\
    \x0eorder_lifespan\x18\x07\x20\x01(\x0b2\x19.google.protobuf.DurationR\r\
    orderLifespan\"\x18\n\x16MsgMarketOrderResponse\"\xd5\x02\n\nMsgMMOrder\
    \x12\x18\n\x07orderer\x18\x01\x20\x01(\tR\x07orderer\x12\x17\n\x07pair_i\
    d\x18\x02\x20\x01(\x04R\x06pairId\x12$\n\x0emax_sell_price\x18\x03\x20\
    \x01(\tR\x0cmaxSellPrice\x12$\n\x0emin_sell_price\x18\x04\x20\x01(\tR\
    \x0cminSellPrice\x12\x1f\n\x0bsell_amount\x18\x05\x20\x01(\tR\nsellAmoun\
    t\x12\"\n\rmax_buy_price\x18\x06\x20\x01(\tR\x0bmaxBuyPrice\x12\"\n\rmin\
    _buy_price\x18\x07\x20\x01(\tR\x0bminBuyPrice\x12\x1d\n\nbuy_amount\x18\
    \x08\x20\x01(\tR\tbuyAmount\x12@\n\x0eorder_lifespan\x18\t\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\rorderLifespan\"\x14\n\x12MsgMMOrderRespo\
    nse\"^\n\x0eMsgCancelOrder\x12\x18\n\x07orderer\x18\x01\x20\x01(\tR\x07o\
    rderer\x12\x17\n\x07pair_id\x18\x02\x20\x01(\x04R\x06pairId\x12\x19\n\
    \x08order_id\x18\x03\x20\x01(\x04R\x07orderId\"\x18\n\x16MsgCancelOrderR\
    esponse\"I\n\x12MsgCancelAllOrders\x12\x18\n\x07orderer\x18\x01\x20\x01(\
    \tR\x07orderer\x12\x19\n\x08pair_ids\x18\x02\x20\x03(\x04R\x07pairIds\"\
    \x1c\n\x1aMsgCancelAllOrdersResponse\"E\n\x10MsgCancelMMOrder\x12\x18\n\
    \x07orderer\x18\x01\x20\x01(\tR\x07orderer\x12\x17\n\x07pair_id\x18\x02\
    \x20\x01(\x04R\x06pairId\"\x1a\n\x18MsgCancelMMOrderResponse2\xa7\x08\n\
    \x03Msg\x12\\\n\nCreatePair\x12\".shogun.liquidity.v1.MsgCreatePair\x1a*\
    .shogun.liquidity.v1.MsgCreatePairResponse\x12\\\n\nCreatePool\x12\".sho\
    gun.liquidity.v1.MsgCreatePool\x1a*.shogun.liquidity.v1.MsgCreatePoolRes\
    ponse\x12n\n\x10CreateRangedPool\x12(.shogun.liquidity.v1.MsgCreateRange\
    dPool\x1a0.shogun.liquidity.v1.MsgCreateRangedPoolResponse\x12S\n\x07Dep\
    osit\x12\x1f.shogun.liquidity.v1.MsgDeposit\x1a'.shogun.liquidity.v1.Msg\
    DepositResponse\x12V\n\x08Withdraw\x12\x20.shogun.liquidity.v1.MsgWithdr\
    aw\x1a(.shogun.liquidity.v1.MsgWithdrawResponse\x12\\\n\nLimitOrder\x12\
    \".shogun.liquidity.v1.MsgLimitOrder\x1a*.shogun.liquidity.v1.MsgLimitOr\
    derResponse\x12_\n\x0bMarketOrder\x12#.shogun.liquidity.v1.MsgMarketOrde\
    r\x1a+.shogun.liquidity.v1.MsgMarketOrderResponse\x12S\n\x07MMOrder\x12\
    \x1f.shogun.liquidity.v1.MsgMMOrder\x1a'.shogun.liquidity.v1.MsgMMOrderR\
    esponse\x12_\n\x0bCancelOrder\x12#.shogun.liquidity.v1.MsgCancelOrder\
    \x1a+.shogun.liquidity.v1.MsgCancelOrderResponse\x12k\n\x0fCancelAllOrde\
    rs\x12'.shogun.liquidity.v1.MsgCancelAllOrders\x1a/.shogun.liquidity.v1.\
    MsgCancelAllOrdersResponse\x12e\n\rCancelMMOrder\x12%.shogun.liquidity.v\
    1.MsgCancelMMOrder\x1a-.shogun.liquidity.v1.MsgCancelMMOrderResponseJ\
    \xcaE\n\x07\x12\x05\0\0\x87\x02#\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\0(\n\t\n\x02\x03\
    \x01\x12\x03\x04\0(\n\t\n\x02\x03\x02\x12\x03\x06\0\x19\n*\n\x02\x06\0\
    \x12\x04\t\0*\x01\x1a\x1e\x20Msg\x20defines\x20the\x20Msg\x20service.\n\
    \n\n\n\x03\x06\0\x01\x12\x03\t\x08\x0b\n>\n\x04\x06\0\x02\0\x12\x03\x0b\
    \x02@\x1a1\x20CreatePair\x20defines\x20a\x20method\x20for\x20creating\
    \x20a\x20pair\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x06\x10\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x0b\x11\x1e\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x0b)>\n>\n\x04\x06\0\x02\x01\x12\x03\x0e\x02@\x1a1\x20CreatePool\
    \x20defines\x20a\x20method\x20for\x20creating\x20a\x20pool\n\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x0e\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x0e\x11\x1e\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0e)>\nJ\n\x04\
    \x06\0\x02\x02\x12\x03\x11\x02R\x1a=\x20CreateRangePool\x20defines\x20a\
    \x20method\x20for\x20creating\x20a\x20ranged\x20pool\n\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03\x11\x06\x16\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\
    \x11\x17*\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x115P\nH\n\x04\x06\0\x02\
    \x03\x12\x03\x14\x027\x1a;\x20Deposit\x20defines\x20a\x20method\x20for\
    \x20depositing\x20coins\x20to\x20the\x20pool\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03\x14\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x14\x0e\x18\
    \n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x14#5\nP\n\x04\x06\0\x02\x04\x12\
    \x03\x17\x02:\x1aC\x20Withdraw\x20defines\x20a\x20method\x20for\x20withd\
    rawing\x20pool\x20coin\x20from\x20the\x20pool\n\n\x0c\n\x05\x06\0\x02\
    \x04\x01\x12\x03\x17\x06\x0e\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x17\
    \x0f\x1a\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x17%8\nC\n\x04\x06\0\x02\
    \x05\x12\x03\x1a\x02@\x1a6\x20LimitOrder\x20defines\x20a\x20method\x20fo\
    r\x20making\x20a\x20limit\x20order\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\
    \x03\x1a\x06\x10\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x1a\x11\x1e\n\x0c\
    \n\x05\x06\0\x02\x05\x03\x12\x03\x1a)>\nE\n\x04\x06\0\x02\x06\x12\x03\
    \x1d\x02C\x1a8\x20MarketOrder\x20defines\x20a\x20method\x20for\x20making\
    \x20a\x20market\x20order\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\x1d\x06\
    \x11\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03\x1d\x12\x20\n\x0c\n\x05\x06\0\
    \x02\x06\x03\x12\x03\x1d+A\nO\n\x04\x06\0\x02\x07\x12\x03\x20\x027\x1aB\
    \x20MsgMMOrder\x20defines\x20a\x20method\x20for\x20making\x20a\x20MM(mar\
    ket\x20making)\x20order\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\x20\x06\
    \r\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x20\x0e\x18\n\x0c\n\x05\x06\0\
    \x02\x07\x03\x12\x03\x20#5\nC\n\x04\x06\0\x02\x08\x12\x03#\x02C\x1a6\x20\
    CancelOrder\x20defines\x20a\x20method\x20for\x20cancelling\x20an\x20orde\
    r\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03#\x06\x11\n\x0c\n\x05\x06\0\x02\
    \x08\x02\x12\x03#\x12\x20\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03#+A\nI\n\
    \x04\x06\0\x02\t\x12\x03&\x02O\x1a<\x20CancelAllOrders\x20defines\x20a\
    \x20method\x20for\x20cancelling\x20all\x20orders\n\n\x0c\n\x05\x06\0\x02\
    \t\x01\x12\x03&\x06\x15\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03&\x16(\n\x0c\
    \n\x05\x06\0\x02\t\x03\x12\x03&3M\nc\n\x04\x06\0\x02\n\x12\x03)\x02I\x1a\
    V\x20CancelMMOrder\x20defines\x20a\x20method\x20for\x20cancelling\x20pre\
    viously\x20placed\x20market\x20making\x20orders\n\n\x0c\n\x05\x06\0\x02\
    \n\x01\x12\x03)\x06\x13\n\x0c\n\x05\x06\0\x02\n\x02\x12\x03)\x14$\n\x0c\
    \n\x05\x06\0\x02\n\x03\x12\x03)/G\nG\n\x02\x04\0\x12\x04-\06\x01\x1a;\
    \x20MsgCreatePair\x20defines\x20an\x20SDK\x20message\x20for\x20creating\
    \x20a\x20pair.\n\n\n\n\x03\x04\0\x01\x12\x03-\x08\x15\nU\n\x04\x04\0\x02\
    \0\x12\x03/\x02\x15\x1aH\x20creator\x20specifies\x20the\x20bech32-encode\
    d\x20address\x20that\x20is\x20the\x20pair\x20creator.\n\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03/\t\x10\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03/\x13\x14\nI\n\x04\x04\0\x02\x01\x12\
    \x032\x02\x1d\x1a<\x20base_coin_denom\x20specifies\x20the\x20base\x20coi\
    n\x20denom\x20of\x20the\x20pair.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    2\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x032\t\x18\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x032\x1b\x1c\nK\n\x04\x04\0\x02\x02\x12\x035\x02\x1e\
    \x1a>\x20quote_coin_denom\x20specifies\x20the\x20quote\x20coin\x20denom\
    \x20of\x20the\x20pair.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x035\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x035\t\x19\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x035\x1c\x1d\n\t\n\x02\x04\x01\x12\x038\0\x20\n\n\n\x03\x04\x01\
    \x01\x12\x038\x08\x1d\nG\n\x02\x04\x02\x12\x04;\0E\x01\x1a;\x20MsgCreate\
    Pool\x20defines\x20an\x20SDK\x20message\x20for\x20creating\x20a\x20pool.\
    \n\n\n\n\x03\x04\x02\x01\x12\x03;\x08\x15\nT\n\x04\x04\x02\x02\0\x12\x03\
    =\x02\x15\x1aG\x20creator\x20specifies\x20the\x20bech32-encoded\x20addre\
    ss\x20that\x20is\x20the\x20pool\x20creator\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03=\t\x10\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03=\x13\x14\n-\n\x04\x04\x02\x02\x01\x12\
    \x03@\x02\x15\x1a\x20\x20pair_id\x20specifies\x20the\x20pair\x20id.\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03@\t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03@\x13\x14\
    \nG\n\x04\x04\x02\x02\x02\x12\x04C\x02D\x07\x1a9\x20deposit_coins\x20spe\
    cifies\x20the\x20amount\x20of\x20coins\x20to\x20deposit.\n\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03C\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\
    \x03C\x0b#\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03C$1\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03C45\nL\n\x02\x04\x03\x12\x03H\0\x20\x1aA\x20MsgC\
    reatePoolResponse\x20defines\x20the\x20Msg/CreatePool\x20response\x20typ\
    e.\n\n\n\n\x03\x04\x03\x01\x12\x03H\x08\x1d\nT\n\x02\x04\x04\x12\x04K\0^\
    \x01\x1aH\x20MsgCreateRangedPool\x20defines\x20an\x20SDK\x20message\x20f\
    or\x20creating\x20a\x20ranged\x20pool.\n\n\n\n\x03\x04\x04\x01\x12\x03K\
    \x08\x1b\nT\n\x04\x04\x04\x02\0\x12\x03M\x02\x15\x1aG\x20creator\x20spec\
    ifies\x20the\x20bech32-encoded\x20address\x20that\x20is\x20the\x20pool\
    \x20creator\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03M\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03M\t\x10\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03M\
    \x13\x14\n-\n\x04\x04\x04\x02\x01\x12\x03P\x02\x15\x1a\x20\x20pair_id\
    \x20specifies\x20the\x20pair\x20id.\n\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x03P\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03P\t\x10\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03P\x13\x14\nG\n\x04\x04\x04\x02\x02\x12\
    \x04S\x02T\x07\x1a9\x20deposit_coins\x20specifies\x20the\x20amount\x20of\
    \x20coins\x20to\x20deposit.\n\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03S\
    \x02\n\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03S\x0b#\n\x0c\n\x05\x04\x04\
    \x02\x02\x01\x12\x03S$1\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03S45\n\x0c\
    \n\x04\x04\x04\x02\x03\x12\x04V\x02W\x07\n\x0c\n\x05\x04\x04\x02\x03\x05\
    \x12\x03V\x02\x08\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03V\t\x12\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03V\x15\x16\n\x0c\n\x04\x04\x04\x02\x04\
    \x12\x04Y\x02Z\x07\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03Y\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\x04\x01\x12\x03Y\t\x12\n\x0c\n\x05\x04\x04\x02\
    \x04\x03\x12\x03Y\x15\x16\n\x0c\n\x04\x04\x04\x02\x05\x12\x04\\\x02]\x07\
    \n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x05\x01\x12\x03\\\t\x16\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03\\\
    \x19\x1a\nX\n\x02\x04\x05\x12\x03a\0&\x1aM\x20MsgCreateRangedPoolRespons\
    e\x20defines\x20the\x20Msg/CreateRangedPool\x20response\x20type.\n\n\n\n\
    \x03\x04\x05\x01\x12\x03a\x08#\nP\n\x02\x04\x06\x12\x04d\0n\x01\x1aD\x20\
    MsgDeposit\x20defines\x20an\x20SDK\x20message\x20for\x20depositing\x20co\
    ins\x20to\x20the\x20pool\n\n\n\n\x03\x04\x06\x01\x12\x03d\x08\x12\n^\n\
    \x04\x04\x06\x02\0\x12\x03f\x02\x17\x1aQ\x20depositor\x20specifies\x20th\
    e\x20bech32-encoded\x20address\x20that\x20makes\x20a\x20deposit\x20to\
    \x20the\x20pool\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03f\x02\x08\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03f\t\x12\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x03f\x15\x16\n,\n\x04\x04\x06\x02\x01\x12\x03i\x02\x15\x1a\x1f\x20pool_\
    id\x20specifies\x20the\x20pool\x20id\n\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x03i\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03i\t\x10\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x03i\x13\x14\nG\n\x04\x04\x06\x02\x02\x12\
    \x04l\x02m\x07\x1a9\x20deposit_coins\x20specifies\x20the\x20amount\x20of\
    \x20coins\x20to\x20deposit.\n\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03l\
    \x02\n\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x03l\x0b#\n\x0c\n\x05\x04\x06\
    \x02\x02\x01\x12\x03l$1\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03l45\nF\n\
    \x02\x04\x07\x12\x03q\0\x1d\x1a;\x20MsgDepositResponse\x20defines\x20the\
    \x20Msg/Deposit\x20response\x20type.\n\n\n\n\x03\x04\x07\x01\x12\x03q\
    \x08\x1a\nX\n\x02\x04\x08\x12\x04t\0}\x01\x1aL\x20MsgWithdraw\x20defines\
    \x20an\x20SDK\x20message\x20for\x20withdrawing\x20pool\x20coin\x20from\
    \x20the\x20pool\n\n\n\n\x03\x04\x08\x01\x12\x03t\x08\x13\ne\n\x04\x04\
    \x08\x02\0\x12\x03v\x02\x18\x1aX\x20withdrawer\x20specifies\x20the\x20be\
    ch32-encoded\x20address\x20that\x20withdraws\x20pool\x20coin\x20from\x20\
    the\x20pool\n\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03v\x02\x08\n\x0c\n\x05\
    \x04\x08\x02\0\x01\x12\x03v\t\x13\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03v\
    \x16\x17\n,\n\x04\x04\x08\x02\x01\x12\x03y\x02\x15\x1a\x1f\x20pool_id\
    \x20specifies\x20the\x20pool\x20id\n\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\
    \x03y\x02\x08\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03y\t\x10\n\x0c\n\x05\
    \x04\x08\x02\x01\x03\x12\x03y\x13\x14\nc\n\x04\x04\x08\x02\x02\x12\x03|\
    \x02*\x1aV\x20pool_coin\x20specifies\x20the\x20pool\x20coin\x20that\x20i\
    s\x20a\x20proof\x20of\x20liquidity\x20provider\x20for\x20the\x20pool\n\n\
    \x0c\n\x05\x04\x08\x02\x02\x06\x12\x03|\x02\x1a\n\x0c\n\x05\x04\x08\x02\
    \x02\x01\x12\x03|\x1b$\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03|'(\nI\n\
    \x02\x04\t\x12\x04\x80\x01\0\x1e\x1a=\x20MsgWithdrawResponse\x20defines\
    \x20the\x20Msg/Withdraw\x20response\x20type.\n\n\x0b\n\x03\x04\t\x01\x12\
    \x04\x80\x01\x08\x1b\nM\n\x02\x04\n\x12\x06\x83\x01\0\x9b\x01\x01\x1a?\
    \x20MsgLimitOrder\x20defines\x20an\x20SDK\x20message\x20for\x20making\
    \x20a\x20limit\x20order\n\n\x0b\n\x03\x04\n\x01\x12\x04\x83\x01\x08\x15\
    \nP\n\x04\x04\n\x02\0\x12\x04\x85\x01\x02\x15\x1aB\x20orderer\x20specifi\
    es\x20the\x20bech32-encoded\x20address\x20that\x20makes\x20an\x20order\n\
    \n\r\n\x05\x04\n\x02\0\x05\x12\x04\x85\x01\x02\x08\n\r\n\x05\x04\n\x02\0\
    \x01\x12\x04\x85\x01\t\x10\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x85\x01\x13\
    \x14\n-\n\x04\x04\n\x02\x01\x12\x04\x88\x01\x02\x15\x1a\x1f\x20pair_id\
    \x20specifies\x20the\x20pair\x20id\n\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\
    \x88\x01\x02\x08\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x88\x01\t\x10\n\r\n\
    \x05\x04\n\x02\x01\x03\x12\x04\x88\x01\x13\x14\nD\n\x04\x04\n\x02\x02\
    \x12\x04\x8b\x01\x02\x1f\x1a6\x20direction\x20specifies\x20the\x20order\
    \x20direction(buy\x20or\x20sell)\n\n\r\n\x05\x04\n\x02\x02\x06\x12\x04\
    \x8b\x01\x02\x10\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\x8b\x01\x11\x1a\n\r\
    \n\x05\x04\n\x02\x02\x03\x12\x04\x8b\x01\x1d\x1e\nJ\n\x04\x04\n\x02\x03\
    \x12\x04\x8e\x01\x02+\x1a<\x20offer_coin\x20specifies\x20the\x20amount\
    \x20of\x20coin\x20the\x20orderer\x20offers\n\n\r\n\x05\x04\n\x02\x03\x06\
    \x12\x04\x8e\x01\x02\x1a\n\r\n\x05\x04\n\x02\x03\x01\x12\x04\x8e\x01\x1b\
    %\n\r\n\x05\x04\n\x02\x03\x03\x12\x04\x8e\x01()\nA\n\x04\x04\n\x02\x04\
    \x12\x04\x91\x01\x02\x1f\x1a3\x20demand_coin_denom\x20specifies\x20the\
    \x20demand\x20coin\x20denom\n\n\r\n\x05\x04\n\x02\x04\x05\x12\x04\x91\
    \x01\x02\x08\n\r\n\x05\x04\n\x02\x04\x01\x12\x04\x91\x01\t\x1a\n\r\n\x05\
    \x04\n\x02\x04\x03\x12\x04\x91\x01\x1d\x1e\n/\n\x04\x04\n\x02\x05\x12\
    \x04\x94\x01\x02\x14\x1a!\x20price\x20specifies\x20the\x20order\x20price\
    \n\n\r\n\x05\x04\n\x02\x05\x05\x12\x04\x94\x01\x02\x08\n\r\n\x05\x04\n\
    \x02\x05\x01\x12\x04\x94\x01\t\x0e\n\r\n\x05\x04\n\x02\x05\x03\x12\x04\
    \x94\x01\x11\x12\nY\n\x04\x04\n\x02\x06\x12\x04\x97\x01\x02\x15\x1aK\x20\
    amount\x20specifies\x20the\x20amount\x20of\x20base\x20coin\x20the\x20ord\
    erer\x20wants\x20to\x20buy\x20or\x20sell\n\n\r\n\x05\x04\n\x02\x06\x05\
    \x12\x04\x97\x01\x02\x08\n\r\n\x05\x04\n\x02\x06\x01\x12\x04\x97\x01\t\
    \x0f\n\r\n\x05\x04\n\x02\x06\x03\x12\x04\x97\x01\x12\x13\n;\n\x04\x04\n\
    \x02\x07\x12\x04\x9a\x01\x02/\x1a-\x20order_lifespan\x20specifies\x20the\
    \x20order\x20lifespan\n\n\r\n\x05\x04\n\x02\x07\x06\x12\x04\x9a\x01\x02\
    \x1a\n\r\n\x05\x04\n\x02\x07\x01\x12\x04\x9a\x01\x1b)\n\r\n\x05\x04\n\
    \x02\x07\x03\x12\x04\x9a\x01,-\nM\n\x02\x04\x0b\x12\x04\x9e\x01\0\x20\
    \x1aA\x20MsgLimitOrderResponse\x20defines\x20the\x20Msg/LimitOrder\x20re\
    sponse\x20type.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\x9e\x01\x08\x1d\nO\n\
    \x02\x04\x0c\x12\x06\xa1\x01\0\xb6\x01\x01\x1aA\x20MsgMarketOrder\x20def\
    ines\x20an\x20SDK\x20message\x20for\x20making\x20a\x20market\x20order\n\
    \n\x0b\n\x03\x04\x0c\x01\x12\x04\xa1\x01\x08\x16\nP\n\x04\x04\x0c\x02\0\
    \x12\x04\xa3\x01\x02\x15\x1aB\x20orderer\x20specifies\x20the\x20bech32-e\
    ncoded\x20address\x20that\x20makes\x20an\x20order\n\n\r\n\x05\x04\x0c\
    \x02\0\x05\x12\x04\xa3\x01\x02\x08\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\
    \xa3\x01\t\x10\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xa3\x01\x13\x14\n-\n\
    \x04\x04\x0c\x02\x01\x12\x04\xa6\x01\x02\x15\x1a\x1f\x20pair_id\x20speci\
    fies\x20the\x20pair\x20id\n\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xa6\
    \x01\x02\x08\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xa6\x01\t\x10\n\r\n\
    \x05\x04\x0c\x02\x01\x03\x12\x04\xa6\x01\x13\x14\nD\n\x04\x04\x0c\x02\
    \x02\x12\x04\xa9\x01\x02\x1f\x1a6\x20direction\x20specifies\x20the\x20or\
    der\x20direction(buy\x20or\x20sell)\n\n\r\n\x05\x04\x0c\x02\x02\x06\x12\
    \x04\xa9\x01\x02\x10\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\xa9\x01\x11\
    \x1a\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xa9\x01\x1d\x1e\nJ\n\x04\x04\
    \x0c\x02\x03\x12\x04\xac\x01\x02+\x1a<\x20offer_coin\x20specifies\x20the\
    \x20amount\x20of\x20coin\x20the\x20orderer\x20offers\n\n\r\n\x05\x04\x0c\
    \x02\x03\x06\x12\x04\xac\x01\x02\x1a\n\r\n\x05\x04\x0c\x02\x03\x01\x12\
    \x04\xac\x01\x1b%\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\xac\x01()\nA\n\
    \x04\x04\x0c\x02\x04\x12\x04\xaf\x01\x02\x1f\x1a3\x20demand_coin_denom\
    \x20specifies\x20the\x20demand\x20coin\x20denom\n\n\r\n\x05\x04\x0c\x02\
    \x04\x05\x12\x04\xaf\x01\x02\x08\n\r\n\x05\x04\x0c\x02\x04\x01\x12\x04\
    \xaf\x01\t\x1a\n\r\n\x05\x04\x0c\x02\x04\x03\x12\x04\xaf\x01\x1d\x1e\nY\
    \n\x04\x04\x0c\x02\x05\x12\x04\xb2\x01\x02\x15\x1aK\x20amount\x20specifi\
    es\x20the\x20amount\x20of\x20base\x20coin\x20the\x20orderer\x20wants\x20\
    to\x20buy\x20or\x20sell\n\n\r\n\x05\x04\x0c\x02\x05\x05\x12\x04\xb2\x01\
    \x02\x08\n\r\n\x05\x04\x0c\x02\x05\x01\x12\x04\xb2\x01\t\x0f\n\r\n\x05\
    \x04\x0c\x02\x05\x03\x12\x04\xb2\x01\x12\x13\n;\n\x04\x04\x0c\x02\x06\
    \x12\x04\xb5\x01\x02/\x1a-\x20order_lifespan\x20specifies\x20the\x20orde\
    r\x20lifespan\n\n\r\n\x05\x04\x0c\x02\x06\x06\x12\x04\xb5\x01\x02\x1a\n\
    \r\n\x05\x04\x0c\x02\x06\x01\x12\x04\xb5\x01\x1b)\n\r\n\x05\x04\x0c\x02\
    \x06\x03\x12\x04\xb5\x01,-\nO\n\x02\x04\r\x12\x04\xb9\x01\0!\x1aC\x20Msg\
    MarketOrderResponse\x20defines\x20the\x20Msg/MarketOrder\x20response\x20\
    type.\n\n\x0b\n\x03\x04\r\x01\x12\x04\xb9\x01\x08\x1e\nW\n\x02\x04\x0e\
    \x12\x06\xbc\x01\0\xdd\x01\x01\x1aI\x20MsgMMOrder\x20defines\x20an\x20SD\
    K\x20message\x20for\x20making\x20a\x20MM(market\x20making)\x20order.\n\n\
    \x0b\n\x03\x04\x0e\x01\x12\x04\xbc\x01\x08\x12\nP\n\x04\x04\x0e\x02\0\
    \x12\x04\xbe\x01\x02\x15\x1aB\x20orderer\x20specifies\x20the\x20bech32-e\
    ncoded\x20address\x20that\x20makes\x20an\x20order\n\n\r\n\x05\x04\x0e\
    \x02\0\x05\x12\x04\xbe\x01\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\
    \xbe\x01\t\x10\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xbe\x01\x13\x14\n-\n\
    \x04\x04\x0e\x02\x01\x12\x04\xc1\x01\x02\x15\x1a\x1f\x20pair_id\x20speci\
    fies\x20the\x20pair\x20id\n\n\r\n\x05\x04\x0e\x02\x01\x05\x12\x04\xc1\
    \x01\x02\x08\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xc1\x01\t\x10\n\r\n\
    \x05\x04\x0e\x02\x01\x03\x12\x04\xc1\x01\x13\x14\nA\n\x04\x04\x0e\x02\
    \x02\x12\x06\xc4\x01\x02\xc5\x01\x07\x1a1\x20max_sell_price\x20specifies\
    \x20the\x20maximum\x20sell\x20price\n\n\r\n\x05\x04\x0e\x02\x02\x05\x12\
    \x04\xc4\x01\x02\x08\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\xc4\x01\t\x17\
    \n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\xc4\x01\x1a\x1b\nA\n\x04\x04\x0e\
    \x02\x03\x12\x06\xc8\x01\x02\xc9\x01\x07\x1a1\x20min_sell_price\x20speci\
    fies\x20the\x20minimum\x20sell\x20price\n\n\r\n\x05\x04\x0e\x02\x03\x05\
    \x12\x04\xc8\x01\x02\x08\n\r\n\x05\x04\x0e\x02\x03\x01\x12\x04\xc8\x01\t\
    \x17\n\r\n\x05\x04\x0e\x02\x03\x03\x12\x04\xc8\x01\x1a\x1b\nT\n\x04\x04\
    \x0e\x02\x04\x12\x06\xcc\x01\x02\xcd\x01\x07\x1aD\x20sell_amount\x20spec\
    ifies\x20the\x20total\x20amount\x20of\x20base\x20coin\x20of\x20sell\x20o\
    rders\n\n\r\n\x05\x04\x0e\x02\x04\x05\x12\x04\xcc\x01\x02\x08\n\r\n\x05\
    \x04\x0e\x02\x04\x01\x12\x04\xcc\x01\t\x14\n\r\n\x05\x04\x0e\x02\x04\x03\
    \x12\x04\xcc\x01\x17\x18\n?\n\x04\x04\x0e\x02\x05\x12\x06\xd0\x01\x02\
    \xd1\x01\x07\x1a/\x20max_buy_price\x20specifies\x20the\x20maximum\x20buy\
    \x20price\n\n\r\n\x05\x04\x0e\x02\x05\x05\x12\x04\xd0\x01\x02\x08\n\r\n\
    \x05\x04\x0e\x02\x05\x01\x12\x04\xd0\x01\t\x16\n\r\n\x05\x04\x0e\x02\x05\
    \x03\x12\x04\xd0\x01\x19\x1a\n?\n\x04\x04\x0e\x02\x06\x12\x06\xd4\x01\
    \x02\xd5\x01\x07\x1a/\x20min_buy_price\x20specifies\x20the\x20minimum\
    \x20buy\x20price\n\n\r\n\x05\x04\x0e\x02\x06\x05\x12\x04\xd4\x01\x02\x08\
    \n\r\n\x05\x04\x0e\x02\x06\x01\x12\x04\xd4\x01\t\x16\n\r\n\x05\x04\x0e\
    \x02\x06\x03\x12\x04\xd4\x01\x19\x1a\nR\n\x04\x04\x0e\x02\x07\x12\x06\
    \xd8\x01\x02\xd9\x01\x07\x1aB\x20buy_amount\x20specifies\x20the\x20total\
    \x20amount\x20of\x20base\x20coin\x20of\x20buy\x20orders\n\n\r\n\x05\x04\
    \x0e\x02\x07\x05\x12\x04\xd8\x01\x02\x08\n\r\n\x05\x04\x0e\x02\x07\x01\
    \x12\x04\xd8\x01\t\x13\n\r\n\x05\x04\x0e\x02\x07\x03\x12\x04\xd8\x01\x16\
    \x17\n;\n\x04\x04\x0e\x02\x08\x12\x04\xdc\x01\x02/\x1a-\x20order_lifespa\
    n\x20specifies\x20the\x20order\x20lifespan\n\n\r\n\x05\x04\x0e\x02\x08\
    \x06\x12\x04\xdc\x01\x02\x1a\n\r\n\x05\x04\x0e\x02\x08\x01\x12\x04\xdc\
    \x01\x1b)\n\r\n\x05\x04\x0e\x02\x08\x03\x12\x04\xdc\x01,-\nG\n\x02\x04\
    \x0f\x12\x04\xe0\x01\0\x1d\x1a;\x20MsgMMOrderResponse\x20defines\x20the\
    \x20Msg/MMOrder\x20response\x20type.\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\
    \xe0\x01\x08\x1a\nM\n\x02\x04\x10\x12\x06\xe3\x01\0\xec\x01\x01\x1a?\x20\
    MsgCancelOrder\x20defines\x20an\x20SDK\x20message\x20for\x20cancelling\
    \x20an\x20order\n\n\x0b\n\x03\x04\x10\x01\x12\x04\xe3\x01\x08\x16\nP\n\
    \x04\x04\x10\x02\0\x12\x04\xe5\x01\x02\x15\x1aB\x20orderer\x20specifies\
    \x20the\x20bech32-encoded\x20address\x20that\x20makes\x20an\x20order\n\n\
    \r\n\x05\x04\x10\x02\0\x05\x12\x04\xe5\x01\x02\x08\n\r\n\x05\x04\x10\x02\
    \0\x01\x12\x04\xe5\x01\t\x10\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xe5\x01\
    \x13\x14\n-\n\x04\x04\x10\x02\x01\x12\x04\xe8\x01\x02\x15\x1a\x1f\x20pai\
    r_id\x20specifies\x20the\x20pair\x20id\n\n\r\n\x05\x04\x10\x02\x01\x05\
    \x12\x04\xe8\x01\x02\x08\n\r\n\x05\x04\x10\x02\x01\x01\x12\x04\xe8\x01\t\
    \x10\n\r\n\x05\x04\x10\x02\x01\x03\x12\x04\xe8\x01\x13\x14\n/\n\x04\x04\
    \x10\x02\x02\x12\x04\xeb\x01\x02\x16\x1a!\x20order_id\x20specifies\x20th\
    e\x20order\x20id\n\n\r\n\x05\x04\x10\x02\x02\x05\x12\x04\xeb\x01\x02\x08\
    \n\r\n\x05\x04\x10\x02\x02\x01\x12\x04\xeb\x01\t\x11\n\r\n\x05\x04\x10\
    \x02\x02\x03\x12\x04\xeb\x01\x14\x15\nO\n\x02\x04\x11\x12\x04\xef\x01\0!\
    \x1aC\x20MsgCancelOrderResponse\x20defines\x20the\x20Msg/CancelOrder\x20\
    response\x20type.\n\n\x0b\n\x03\x04\x11\x01\x12\x04\xef\x01\x08\x1e\nS\n\
    \x02\x04\x12\x12\x06\xf2\x01\0\xf8\x01\x01\x1aE\x20MsgCancelAllOrders\
    \x20defines\x20an\x20SDK\x20message\x20for\x20cancelling\x20all\x20order\
    s\n\n\x0b\n\x03\x04\x12\x01\x12\x04\xf2\x01\x08\x1a\nP\n\x04\x04\x12\x02\
    \0\x12\x04\xf4\x01\x02\x15\x1aB\x20orderer\x20specifies\x20the\x20bech32\
    -encoded\x20address\x20that\x20makes\x20an\x20order\n\n\r\n\x05\x04\x12\
    \x02\0\x05\x12\x04\xf4\x01\x02\x08\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\
    \xf4\x01\t\x10\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\xf4\x01\x13\x14\n<\n\
    \x04\x04\x12\x02\x01\x12\x04\xf7\x01\x02\x1f\x1a.\x20pair_ids\x20specifi\
    es\x20pair\x20ids\x20to\x20cancel\x20orders\n\n\r\n\x05\x04\x12\x02\x01\
    \x04\x12\x04\xf7\x01\x02\n\n\r\n\x05\x04\x12\x02\x01\x05\x12\x04\xf7\x01\
    \x0b\x11\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\xf7\x01\x12\x1a\n\r\n\x05\
    \x04\x12\x02\x01\x03\x12\x04\xf7\x01\x1d\x1e\nW\n\x02\x04\x13\x12\x04\
    \xfb\x01\0%\x1aK\x20MsgCancelAllOrdersResponse\x20defines\x20the\x20Msg/\
    CancelAllOrders\x20response\x20type.\n\n\x0b\n\x03\x04\x13\x01\x12\x04\
    \xfb\x01\x08\"\n_\n\x02\x04\x14\x12\x06\xfe\x01\0\x84\x02\x01\x1aQ\x20Ms\
    gCancelMMOrder\x20defines\x20an\x20SDK\x20message\x20for\x20cancelling\
    \x20all\x20market\x20making\x20orders\n\n\x0b\n\x03\x04\x14\x01\x12\x04\
    \xfe\x01\x08\x18\nP\n\x04\x04\x14\x02\0\x12\x04\x80\x02\x02\x15\x1aB\x20\
    orderer\x20specifies\x20the\x20bech32-encoded\x20address\x20that\x20make\
    s\x20an\x20order\n\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\x80\x02\x02\x08\n\
    \r\n\x05\x04\x14\x02\0\x01\x12\x04\x80\x02\t\x10\n\r\n\x05\x04\x14\x02\0\
    \x03\x12\x04\x80\x02\x13\x14\n>\n\x04\x04\x14\x02\x01\x12\x04\x83\x02\
    \x02\x15\x1a0\x20pair_id\x20specifies\x20the\x20pair\x20id\x20to\x20canc\
    el\x20orders\n\n\r\n\x05\x04\x14\x02\x01\x05\x12\x04\x83\x02\x02\x08\n\r\
    \n\x05\x04\x14\x02\x01\x01\x12\x04\x83\x02\t\x10\n\r\n\x05\x04\x14\x02\
    \x01\x03\x12\x04\x83\x02\x13\x14\nS\n\x02\x04\x15\x12\x04\x87\x02\0#\x1a\
    G\x20MsgCancelMMOrderResponse\x20defines\x20the\x20Msg/CancelMMOrder\x20\
    response\x20type.\n\n\x0b\n\x03\x04\x15\x01\x12\x04\x87\x02\x08\x20b\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::coin::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::liquidity::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(22);
            messages.push(MsgCreatePair::generated_message_descriptor_data());
            messages.push(MsgCreatePairResponse::generated_message_descriptor_data());
            messages.push(MsgCreatePool::generated_message_descriptor_data());
            messages.push(MsgCreatePoolResponse::generated_message_descriptor_data());
            messages.push(MsgCreateRangedPool::generated_message_descriptor_data());
            messages.push(MsgCreateRangedPoolResponse::generated_message_descriptor_data());
            messages.push(MsgDeposit::generated_message_descriptor_data());
            messages.push(MsgDepositResponse::generated_message_descriptor_data());
            messages.push(MsgWithdraw::generated_message_descriptor_data());
            messages.push(MsgWithdrawResponse::generated_message_descriptor_data());
            messages.push(MsgLimitOrder::generated_message_descriptor_data());
            messages.push(MsgLimitOrderResponse::generated_message_descriptor_data());
            messages.push(MsgMarketOrder::generated_message_descriptor_data());
            messages.push(MsgMarketOrderResponse::generated_message_descriptor_data());
            messages.push(MsgMMOrder::generated_message_descriptor_data());
            messages.push(MsgMMOrderResponse::generated_message_descriptor_data());
            messages.push(MsgCancelOrder::generated_message_descriptor_data());
            messages.push(MsgCancelOrderResponse::generated_message_descriptor_data());
            messages.push(MsgCancelAllOrders::generated_message_descriptor_data());
            messages.push(MsgCancelAllOrdersResponse::generated_message_descriptor_data());
            messages.push(MsgCancelMMOrder::generated_message_descriptor_data());
            messages.push(MsgCancelMMOrderResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
